services:
  db:
    image: postgres:13-alpine
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data/
    env_file:
      - .env.prod
    networks:
      - app-network
    # Adiciona uma verificação de saúde para garantir que o backend espere o DB estar pronto
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U gces_prod_user -d gces_prod_db"]
      interval: 5s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: .
      dockerfile: Dockerfile.prod
    # Este comando roda as migrações e DEPOIS inicia o servidor
    command: sh -c "python manage.py migrate && gunicorn app.wsgi:application --bind 0.0.0.0:8000 --workers=4"
    networks:
      - app-network
    env_file:
      - .env.prod
    depends_on:
      db:
        # Garante que o backend só suba depois que o banco de dados estiver saudável
        condition: service_healthy

  nginx:
    build:
      context: ./www
      dockerfile: Dockerfile.prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./www/nginx/nginx.crt:/etc/nginx/ssl/nginx.crt:ro
      - ./www/nginx/nginx.key:/etc/nginx/ssl/nginx.key:ro
    networks:
      - app-network
    depends_on:
      - backend

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data_prod: